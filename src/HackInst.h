/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
#include <jvmti.h>
/* Header for class HackInst */

#ifndef _Included_HackInst
#define _Included_HackInst
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     HackInst
 * Method:    addTransformer
 * Signature: (Ljava/lang/instrument/ClassFileTransformer;Z)V
 */
JNIEXPORT void JNICALL Java_HackInst_addTransformer__Ljava_lang_instrument_ClassFileTransformer_2Z
  (JNIEnv *, jobject, jobject, jboolean);

/*
 * Class:     HackInst
 * Method:    addTransformer
 * Signature: (Ljava/lang/instrument/ClassFileTransformer;)V
 */
JNIEXPORT void JNICALL Java_HackInst_addTransformer__Ljava_lang_instrument_ClassFileTransformer_2
  (JNIEnv *, jobject, jobject);

/*
 * Class:     HackInst
 * Method:    removeTransformer
 * Signature: (Ljava/lang/instrument/ClassFileTransformer;)Z
 */
JNIEXPORT jboolean JNICALL Java_HackInst_removeTransformer
  (JNIEnv *, jobject, jobject);

/*
 * Class:     HackInst
 * Method:    isRetransformClassesSupported
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_HackInst_isRetransformClassesSupported
  (JNIEnv *, jobject);

/*
 * Class:     HackInst
 * Method:    retransformClasses
 * Signature: ([Ljava/lang/Class;)V
 */
JNIEXPORT void JNICALL Java_HackInst_retransformClasses
  (JNIEnv *, jobject, jobjectArray);

/*
 * Class:     HackInst
 * Method:    isRedefineClassesSupported
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_HackInst_isRedefineClassesSupported
  (JNIEnv *, jobject);

/*
 * Class:     HackInst
 * Method:    redefineClasses
 * Signature: ([Ljava/lang/instrument/ClassDefinition;)V
 */
JNIEXPORT void JNICALL Java_HackInst_redefineClasses
(JNIEnv* env, jobject clazz, jobjectArray bytes) {
	
}

/*
 * Class:     HackInst
 * Method:    isModifiableClass
 * Signature: (Ljava/lang/Class;)Z
 */
JNIEXPORT jboolean JNICALL Java_HackInst_isModifiableClass
  (JNIEnv *, jobject, jclass);

/*
 * Class:     HackInst
 * Method:    getAllLoadedClasses
 * Signature: ()[Ljava/lang/Class;
 */
JNIEXPORT jobjectArray JNICALL Java_HackInst_getAllLoadedClasses
  (JNIEnv *, jobject);

/*
 * Class:     HackInst
 * Method:    getInitiatedClasses
 * Signature: (Ljava/lang/ClassLoader;)[Ljava/lang/Class;
 */
JNIEXPORT jobjectArray JNICALL Java_HackInst_getInitiatedClasses
  (JNIEnv *, jobject, jobject);

/*
 * Class:     HackInst
 * Method:    getObjectSize
 * Signature: (Ljava/lang/Object;)J
 */
JNIEXPORT jlong JNICALL Java_HackInst_getObjectSize
  (JNIEnv *, jobject, jobject);

/*
 * Class:     HackInst
 * Method:    appendToBootstrapClassLoaderSearch
 * Signature: (Ljava/util/jar/JarFile;)V
 */
JNIEXPORT void JNICALL Java_HackInst_appendToBootstrapClassLoaderSearch(JNIEnv* env, jobject, jobject) {
	
}

/*
 * Class:     HackInst
 * Method:    appendToSystemClassLoaderSearch
 * Signature: (Ljava/util/jar/JarFile;)V
 */
JNIEXPORT void JNICALL Java_HackInst_appendToSystemClassLoaderSearch
  (JNIEnv *, jobject, jobject);

/*
 * Class:     HackInst
 * Method:    isNativeMethodPrefixSupported
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_HackInst_isNativeMethodPrefixSupported
  (JNIEnv *, jobject);

/*
 * Class:     HackInst
 * Method:    setNativeMethodPrefix
 * Signature: (Ljava/lang/instrument/ClassFileTransformer;Ljava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_HackInst_setNativeMethodPrefix
  (JNIEnv *, jobject, jobject, jstring);

#ifdef __cplusplus
}
#endif
#endif
